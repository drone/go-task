// Copyright 2025 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/execution.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShellType int32

const (
	ShellType_SH                     ShellType = 0
	ShellType_BASH                   ShellType = 1
	ShellType_POWERSHELL             ShellType = 2
	ShellType_PWSH                   ShellType = 3
	ShellType_PYTHON                 ShellType = 4
	ShellType_SHELL_TYPE_UNSPECIFIED ShellType = 5
)

// Enum value maps for ShellType.
var (
	ShellType_name = map[int32]string{
		0: "SH",
		1: "BASH",
		2: "POWERSHELL",
		3: "PWSH",
		4: "PYTHON",
		5: "SHELL_TYPE_UNSPECIFIED",
	}
	ShellType_value = map[string]int32{
		"SH":                     0,
		"BASH":                   1,
		"POWERSHELL":             2,
		"PWSH":                   3,
		"PYTHON":                 4,
		"SHELL_TYPE_UNSPECIFIED": 5,
	}
)

func (x ShellType) Enum() *ShellType {
	p := new(ShellType)
	*p = x
	return p
}

func (x ShellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_execution_proto_enumTypes[0].Descriptor()
}

func (ShellType) Type() protoreflect.EnumType {
	return &file_proto_execution_proto_enumTypes[0]
}

func (x ShellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellType.Descriptor instead.
func (ShellType) EnumDescriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{0}
}

type Report_Type int32

const (
	Report_UNKNOWN Report_Type = 0
	Report_JUNIT   Report_Type = 1
)

// Enum value maps for Report_Type.
var (
	Report_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "JUNIT",
	}
	Report_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"JUNIT":   1,
	}
)

func (x Report_Type) Enum() *Report_Type {
	p := new(Report_Type)
	*p = x
	return p
}

func (x Report_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_execution_proto_enumTypes[1].Descriptor()
}

func (Report_Type) Type() protoreflect.EnumType {
	return &file_proto_execution_proto_enumTypes[1]
}

func (x Report_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Type.Descriptor instead.
func (Report_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{2, 0}
}

type OutputVariable_OutputType int32

const (
	OutputVariable_STRING OutputVariable_OutputType = 0
	OutputVariable_SECRET OutputVariable_OutputType = 1
)

// Enum value maps for OutputVariable_OutputType.
var (
	OutputVariable_OutputType_name = map[int32]string{
		0: "STRING",
		1: "SECRET",
	}
	OutputVariable_OutputType_value = map[string]int32{
		"STRING": 0,
		"SECRET": 1,
	}
)

func (x OutputVariable_OutputType) Enum() *OutputVariable_OutputType {
	p := new(OutputVariable_OutputType)
	*p = x
	return p
}

func (x OutputVariable_OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputVariable_OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_execution_proto_enumTypes[2].Descriptor()
}

func (OutputVariable_OutputType) Type() protoreflect.EnumType {
	return &file_proto_execution_proto_enumTypes[2]
}

func (x OutputVariable_OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputVariable_OutputType.Descriptor instead.
func (OutputVariable_OutputType) EnumDescriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{5, 0}
}

type UpdateStateRequest_Action int32

const (
	UpdateStateRequest_UNKNOWN UpdateStateRequest_Action = 0
	UpdateStateRequest_PAUSE   UpdateStateRequest_Action = 1
	UpdateStateRequest_RESUME  UpdateStateRequest_Action = 2
)

// Enum value maps for UpdateStateRequest_Action.
var (
	UpdateStateRequest_Action_name = map[int32]string{
		0: "UNKNOWN",
		1: "PAUSE",
		2: "RESUME",
	}
	UpdateStateRequest_Action_value = map[string]int32{
		"UNKNOWN": 0,
		"PAUSE":   1,
		"RESUME":  2,
	}
)

func (x UpdateStateRequest_Action) Enum() *UpdateStateRequest_Action {
	p := new(UpdateStateRequest_Action)
	*p = x
	return p
}

func (x UpdateStateRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStateRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_execution_proto_enumTypes[3].Descriptor()
}

func (UpdateStateRequest_Action) Type() protoreflect.EnumType {
	return &file_proto_execution_proto_enumTypes[3]
}

func (x UpdateStateRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStateRequest_Action.Descriptor instead.
func (UpdateStateRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{15, 0}
}

type StepContext struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NumRetries           int32                  `protobuf:"varint,1,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"` // Deprecated
	ExecutionTimeoutSecs int64                  `protobuf:"varint,2,opt,name=execution_timeout_secs,json=executionTimeoutSecs,proto3" json:"execution_timeout_secs,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StepContext) Reset() {
	*x = StepContext{}
	mi := &file_proto_execution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepContext) ProtoMessage() {}

func (x *StepContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepContext.ProtoReflect.Descriptor instead.
func (*StepContext) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{0}
}

func (x *StepContext) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

func (x *StepContext) GetExecutionTimeoutSecs() int64 {
	if x != nil {
		return x.ExecutionTimeoutSecs
	}
	return 0
}

type PublishArtifactsStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*UploadFile          `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Images        []*BuildPublishImage   `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishArtifactsStep) Reset() {
	*x = PublishArtifactsStep{}
	mi := &file_proto_execution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishArtifactsStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishArtifactsStep) ProtoMessage() {}

func (x *PublishArtifactsStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishArtifactsStep.ProtoReflect.Descriptor instead.
func (*PublishArtifactsStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{1}
}

func (x *PublishArtifactsStep) GetFiles() []*UploadFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *PublishArtifactsStep) GetImages() []*BuildPublishImage {
	if x != nil {
		return x.Images
	}
	return nil
}

type Report struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  Report_Type            `protobuf:"varint,2,opt,name=type,proto3,enum=io.harness.product.ci.engine.proto.Report_Type" json:"type,omitempty"`
	// List of paths to collect reports from. Can be regex as well.
	Paths         []string `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Report) Reset() {
	*x = Report{}
	mi := &file_proto_execution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{2}
}

func (x *Report) GetType() Report_Type {
	if x != nil {
		return x.Type
	}
	return Report_UNKNOWN
}

func (x *Report) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type RunTestsStep struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Args                 string                 `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`
	Language             string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`   // language used for running tests. Java | Python | Go etc.
	BuildTool            string                 `protobuf:"bytes,3,opt,name=buildTool,proto3" json:"buildTool,omitempty"` // build tool used for running tests. maven | bazel | gradle.
	TestAnnotations      string                 `protobuf:"bytes,4,opt,name=testAnnotations,proto3" json:"testAnnotations,omitempty"`
	Packages             string                 `protobuf:"bytes,5,opt,name=packages,proto3" json:"packages,omitempty"`
	RunOnlySelectedTests bool                   `protobuf:"varint,6,opt,name=runOnlySelectedTests,proto3" json:"runOnlySelectedTests,omitempty"`
	Context              *StepContext           `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	ContainerPort        uint32                 `protobuf:"varint,8,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"` // Port of the container on which run step needs to be executed.
	Reports              []*Report              `protobuf:"bytes,9,rep,name=reports,proto3" json:"reports,omitempty"`                                   // Spec for publishing junit reports
	PreTestCommand       string                 `protobuf:"bytes,10,opt,name=preTestCommand,proto3" json:"preTestCommand,omitempty"`                    // Pre-commands to setup environment before running tests
	PostTestCommand      string                 `protobuf:"bytes,11,opt,name=postTestCommand,proto3" json:"postTestCommand,omitempty"`                  // Post commands after running tests
	EnvVarOutputs        []string               `protobuf:"bytes,12,rep,name=envVarOutputs,proto3" json:"envVarOutputs,omitempty"`                      // produced output variables
	// TODO (Vistaar): Proxy this call from addon to LE.
	DiffFiles         string            `protobuf:"bytes,13,opt,name=diff_files,json=diffFiles,proto3" json:"diff_files,omitempty"`
	Environment       map[string]string `protobuf:"bytes,14,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BuildEnvironment  string            `protobuf:"bytes,15,opt,name=buildEnvironment,proto3" json:"buildEnvironment,omitempty"` // Dot net build environment Core | Framework
	FrameworkVersion  string            `protobuf:"bytes,16,opt,name=frameworkVersion,proto3" json:"frameworkVersion,omitempty"` // Dot net version 6.0 | 5.0
	Namespaces        string            `protobuf:"bytes,17,opt,name=namespaces,proto3" json:"namespaces,omitempty"`             // Same function as java package for namespace languages
	TestSplitStrategy string            `protobuf:"bytes,18,opt,name=test_split_strategy,json=testSplitStrategy,proto3" json:"test_split_strategy,omitempty"`
	ParallelizeTests  bool              `protobuf:"varint,19,opt,name=parallelize_tests,json=parallelizeTests,proto3" json:"parallelize_tests,omitempty"`
	TestGlobs         string            `protobuf:"bytes,20,opt,name=test_globs,json=testGlobs,proto3" json:"test_globs,omitempty"` // Comma separated strings which are test globs
	PythonVersion     string            `protobuf:"bytes,21,opt,name=pythonVersion,proto3" json:"pythonVersion,omitempty"`
	TestRoot          string            `protobuf:"bytes,22,opt,name=testRoot,proto3" json:"testRoot,omitempty"`
	Outputs           []*OutputVariable `protobuf:"bytes,23,rep,name=outputs,proto3" json:"outputs,omitempty"`
	ParseSavings      bool              `protobuf:"varint,24,opt,name=parse_savings,json=parseSavings,proto3" json:"parse_savings,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RunTestsStep) Reset() {
	*x = RunTestsStep{}
	mi := &file_proto_execution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTestsStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestsStep) ProtoMessage() {}

func (x *RunTestsStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestsStep.ProtoReflect.Descriptor instead.
func (*RunTestsStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{3}
}

func (x *RunTestsStep) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *RunTestsStep) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RunTestsStep) GetBuildTool() string {
	if x != nil {
		return x.BuildTool
	}
	return ""
}

func (x *RunTestsStep) GetTestAnnotations() string {
	if x != nil {
		return x.TestAnnotations
	}
	return ""
}

func (x *RunTestsStep) GetPackages() string {
	if x != nil {
		return x.Packages
	}
	return ""
}

func (x *RunTestsStep) GetRunOnlySelectedTests() bool {
	if x != nil {
		return x.RunOnlySelectedTests
	}
	return false
}

func (x *RunTestsStep) GetContext() *StepContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RunTestsStep) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *RunTestsStep) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *RunTestsStep) GetPreTestCommand() string {
	if x != nil {
		return x.PreTestCommand
	}
	return ""
}

func (x *RunTestsStep) GetPostTestCommand() string {
	if x != nil {
		return x.PostTestCommand
	}
	return ""
}

func (x *RunTestsStep) GetEnvVarOutputs() []string {
	if x != nil {
		return x.EnvVarOutputs
	}
	return nil
}

func (x *RunTestsStep) GetDiffFiles() string {
	if x != nil {
		return x.DiffFiles
	}
	return ""
}

func (x *RunTestsStep) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *RunTestsStep) GetBuildEnvironment() string {
	if x != nil {
		return x.BuildEnvironment
	}
	return ""
}

func (x *RunTestsStep) GetFrameworkVersion() string {
	if x != nil {
		return x.FrameworkVersion
	}
	return ""
}

func (x *RunTestsStep) GetNamespaces() string {
	if x != nil {
		return x.Namespaces
	}
	return ""
}

func (x *RunTestsStep) GetTestSplitStrategy() string {
	if x != nil {
		return x.TestSplitStrategy
	}
	return ""
}

func (x *RunTestsStep) GetParallelizeTests() bool {
	if x != nil {
		return x.ParallelizeTests
	}
	return false
}

func (x *RunTestsStep) GetTestGlobs() string {
	if x != nil {
		return x.TestGlobs
	}
	return ""
}

func (x *RunTestsStep) GetPythonVersion() string {
	if x != nil {
		return x.PythonVersion
	}
	return ""
}

func (x *RunTestsStep) GetTestRoot() string {
	if x != nil {
		return x.TestRoot
	}
	return ""
}

func (x *RunTestsStep) GetOutputs() []*OutputVariable {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *RunTestsStep) GetParseSavings() bool {
	if x != nil {
		return x.ParseSavings
	}
	return false
}

type RunStep struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Command              string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Context              *StepContext           `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	EnvVarOutputs        []string               `protobuf:"bytes,3,rep,name=env_var_outputs,json=envVarOutputs,proto3" json:"env_var_outputs,omitempty"` // output variables to export as step outcome
	ContainerPort        uint32                 `protobuf:"varint,4,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`  // Deprecated. Port of the container on which run step needs to be executed
	Reports              []*Report              `protobuf:"bytes,5,rep,name=reports,proto3" json:"reports,omitempty"`
	Environment          map[string]string      `protobuf:"bytes,6,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ShellType            ShellType              `protobuf:"varint,7,opt,name=shell_type,json=shellType,proto3,enum=io.harness.product.ci.engine.proto.ShellType" json:"shell_type,omitempty"`
	Detach               bool                   `protobuf:"varint,8,opt,name=detach,proto3" json:"detach,omitempty"`
	Entrypoint           []string               `protobuf:"bytes,9,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Image                string                 `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Outputs              []*OutputVariable      `protobuf:"bytes,11,rep,name=outputs,proto3" json:"outputs,omitempty"`
	ParseSavings         bool                   `protobuf:"varint,12,opt,name=parse_savings,json=parseSavings,proto3" json:"parse_savings,omitempty"`
	ScriptSecretsRuntime bool                   `protobuf:"varint,13,opt,name=script_secrets_runtime,json=scriptSecretsRuntime,proto3" json:"script_secrets_runtime,omitempty"`
	Files                []*File                `protobuf:"bytes,14,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RunStep) Reset() {
	*x = RunStep{}
	mi := &file_proto_execution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStep) ProtoMessage() {}

func (x *RunStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStep.ProtoReflect.Descriptor instead.
func (*RunStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{4}
}

func (x *RunStep) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunStep) GetContext() *StepContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RunStep) GetEnvVarOutputs() []string {
	if x != nil {
		return x.EnvVarOutputs
	}
	return nil
}

func (x *RunStep) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *RunStep) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *RunStep) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *RunStep) GetShellType() ShellType {
	if x != nil {
		return x.ShellType
	}
	return ShellType_SH
}

func (x *RunStep) GetDetach() bool {
	if x != nil {
		return x.Detach
	}
	return false
}

func (x *RunStep) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *RunStep) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RunStep) GetOutputs() []*OutputVariable {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *RunStep) GetParseSavings() bool {
	if x != nil {
		return x.ParseSavings
	}
	return false
}

func (x *RunStep) GetScriptSecretsRuntime() bool {
	if x != nil {
		return x.ScriptSecretsRuntime
	}
	return false
}

func (x *RunStep) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type OutputVariable struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Type          OutputVariable_OutputType `protobuf:"varint,2,opt,name=type,proto3,enum=io.harness.product.ci.engine.proto.OutputVariable_OutputType" json:"type,omitempty"`
	Key           string                    `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputVariable) Reset() {
	*x = OutputVariable{}
	mi := &file_proto_execution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputVariable) ProtoMessage() {}

func (x *OutputVariable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputVariable.ProtoReflect.Descriptor instead.
func (*OutputVariable) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{5}
}

func (x *OutputVariable) GetType() OutputVariable_OutputType {
	if x != nil {
		return x.Type
	}
	return OutputVariable_STRING
}

func (x *OutputVariable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OutputVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RunTestStepV2 struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Command          string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Context          *StepContext           `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	EnvVarOutputs    []string               `protobuf:"bytes,3,rep,name=env_var_outputs,json=envVarOutputs,proto3" json:"env_var_outputs,omitempty"`
	ContainerPort    uint32                 `protobuf:"varint,4,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	Reports          []*Report              `protobuf:"bytes,5,rep,name=reports,proto3" json:"reports,omitempty"`
	Environment      map[string]string      `protobuf:"bytes,6,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ShellType        ShellType              `protobuf:"varint,7,opt,name=shell_type,json=shellType,proto3,enum=io.harness.product.ci.engine.proto.ShellType" json:"shell_type,omitempty"`
	Entrypoint       []string               `protobuf:"bytes,8,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Image            string                 `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	Outputs          []*OutputVariable      `protobuf:"bytes,10,rep,name=outputs,proto3" json:"outputs,omitempty"`
	DiffFiles        string                 `protobuf:"bytes,11,opt,name=diff_files,json=diffFiles,proto3" json:"diff_files,omitempty"`
	IntelligenceMode bool                   `protobuf:"varint,12,opt,name=intelligence_mode,json=intelligenceMode,proto3" json:"intelligence_mode,omitempty"`
	Globs            []string               `protobuf:"bytes,13,rep,name=globs,proto3" json:"globs,omitempty"`
	ParseSavings     bool                   `protobuf:"varint,14,opt,name=parse_savings,json=parseSavings,proto3" json:"parse_savings,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunTestStepV2) Reset() {
	*x = RunTestStepV2{}
	mi := &file_proto_execution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTestStepV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestStepV2) ProtoMessage() {}

func (x *RunTestStepV2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestStepV2.ProtoReflect.Descriptor instead.
func (*RunTestStepV2) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{6}
}

func (x *RunTestStepV2) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunTestStepV2) GetContext() *StepContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RunTestStepV2) GetEnvVarOutputs() []string {
	if x != nil {
		return x.EnvVarOutputs
	}
	return nil
}

func (x *RunTestStepV2) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *RunTestStepV2) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *RunTestStepV2) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *RunTestStepV2) GetShellType() ShellType {
	if x != nil {
		return x.ShellType
	}
	return ShellType_SH
}

func (x *RunTestStepV2) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *RunTestStepV2) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RunTestStepV2) GetOutputs() []*OutputVariable {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *RunTestStepV2) GetDiffFiles() string {
	if x != nil {
		return x.DiffFiles
	}
	return ""
}

func (x *RunTestStepV2) GetIntelligenceMode() bool {
	if x != nil {
		return x.IntelligenceMode
	}
	return false
}

func (x *RunTestStepV2) GetGlobs() []string {
	if x != nil {
		return x.Globs
	}
	return nil
}

func (x *RunTestStepV2) GetParseSavings() bool {
	if x != nil {
		return x.ParseSavings
	}
	return false
}

type PluginStep struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Image   string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Context *StepContext           `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	// Deprecated. Port of the container on which plugin step needs to be executed
	ContainerPort uint32 `protobuf:"varint,3,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// Optional. Entrypoint for plugin step. If empty, it calls docker registry to retrieve the entrypoint
	Entrypoint       []string          `protobuf:"bytes,4,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Environment      map[string]string `protobuf:"bytes,5,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ArtifactFilePath string            `protobuf:"bytes,6,opt,name=artifact_file_path,json=artifactFilePath,proto3" json:"artifact_file_path,omitempty"` // file path to store generated artifact file
	Reports          []*Report         `protobuf:"bytes,7,rep,name=reports,proto3" json:"reports,omitempty"`
	EnvVarOutputs    []string          `protobuf:"bytes,8,rep,name=env_var_outputs,json=envVarOutputs,proto3" json:"env_var_outputs,omitempty"` // output variables to export as step outcome
	ParseSavings     bool              `protobuf:"varint,9,opt,name=parse_savings,json=parseSavings,proto3" json:"parse_savings,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PluginStep) Reset() {
	*x = PluginStep{}
	mi := &file_proto_execution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginStep) ProtoMessage() {}

func (x *PluginStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginStep.ProtoReflect.Descriptor instead.
func (*PluginStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{7}
}

func (x *PluginStep) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PluginStep) GetContext() *StepContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PluginStep) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *PluginStep) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *PluginStep) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *PluginStep) GetArtifactFilePath() string {
	if x != nil {
		return x.ArtifactFilePath
	}
	return ""
}

func (x *PluginStep) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *PluginStep) GetEnvVarOutputs() []string {
	if x != nil {
		return x.EnvVarOutputs
	}
	return nil
}

func (x *PluginStep) GetParseSavings() bool {
	if x != nil {
		return x.ParseSavings
	}
	return false
}

type SaveCacheStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Paths         []string               `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveCacheStep) Reset() {
	*x = SaveCacheStep{}
	mi := &file_proto_execution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveCacheStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCacheStep) ProtoMessage() {}

func (x *SaveCacheStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCacheStep.ProtoReflect.Descriptor instead.
func (*SaveCacheStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{8}
}

func (x *SaveCacheStep) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SaveCacheStep) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type RestoreCacheStep struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Key            string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FailIfNotExist bool                   `protobuf:"varint,2,opt,name=fail_if_not_exist,json=failIfNotExist,proto3" json:"fail_if_not_exist,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RestoreCacheStep) Reset() {
	*x = RestoreCacheStep{}
	mi := &file_proto_execution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreCacheStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreCacheStep) ProtoMessage() {}

func (x *RestoreCacheStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreCacheStep.ProtoReflect.Descriptor instead.
func (*RestoreCacheStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{9}
}

func (x *RestoreCacheStep) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RestoreCacheStep) GetFailIfNotExist() bool {
	if x != nil {
		return x.FailIfNotExist
	}
	return false
}

type ExecuteStep struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskParameters []byte                 `protobuf:"bytes,1,opt,name=task_parameters,json=taskParameters,proto3" json:"task_parameters,omitempty"`
	ExecuteCommand string                 `protobuf:"bytes,2,opt,name=execute_command,json=executeCommand,proto3" json:"execute_command,omitempty"`
	ShellType      ShellType              `protobuf:"varint,3,opt,name=shell_type,json=shellType,proto3,enum=io.harness.product.ci.engine.proto.ShellType" json:"shell_type,omitempty"`
	EnvVarOutputs  []string               `protobuf:"bytes,4,rep,name=env_var_outputs,json=envVarOutputs,proto3" json:"env_var_outputs,omitempty"` // output variables to export as step outcome
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecuteStep) Reset() {
	*x = ExecuteStep{}
	mi := &file_proto_execution_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStep) ProtoMessage() {}

func (x *ExecuteStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStep.ProtoReflect.Descriptor instead.
func (*ExecuteStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteStep) GetTaskParameters() []byte {
	if x != nil {
		return x.TaskParameters
	}
	return nil
}

func (x *ExecuteStep) GetExecuteCommand() string {
	if x != nil {
		return x.ExecuteCommand
	}
	return ""
}

func (x *ExecuteStep) GetShellType() ShellType {
	if x != nil {
		return x.ShellType
	}
	return ShellType_SH
}

func (x *ExecuteStep) GetEnvVarOutputs() []string {
	if x != nil {
		return x.EnvVarOutputs
	}
	return nil
}

type UnitStep struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Types that are valid to be assigned to Step:
	//
	//	*UnitStep_Run
	//	*UnitStep_SaveCache
	//	*UnitStep_RestoreCache
	//	*UnitStep_PublishArtifacts
	//	*UnitStep_Plugin
	//	*UnitStep_RunTests
	//	*UnitStep_ExecuteTask
	//	*UnitStep_RunTestStepV2
	Step             isUnitStep_Step   `protobuf_oneof:"step"`
	CallbackToken    string            `protobuf:"bytes,7,opt,name=callback_token,json=callbackToken,proto3" json:"callback_token,omitempty"`
	TaskId           string            `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SkipCondition    string            `protobuf:"bytes,11,opt,name=skip_condition,json=skipCondition,proto3" json:"skip_condition,omitempty"`
	LogKey           string            `protobuf:"bytes,12,opt,name=log_key,json=logKey,proto3" json:"log_key,omitempty"`
	AccountId        string            `protobuf:"bytes,13,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ContainerPort    uint32            `protobuf:"varint,14,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`                                                                                   // Port of the container on which step needs to be executed
	ConnectorSecrets map[string]string `protobuf:"bytes,18,rep,name=connector_secrets,json=connectorSecrets,proto3" json:"connector_secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The secrets which will be added at step execution
	RuntimeSecrets   []string          `protobuf:"bytes,17,rep,name=runtime_secrets,json=runtimeSecrets,proto3" json:"runtime_secrets,omitempty"`
	SkipOpeningStream bool             `protobuf:"varint,19,opt,name=skip_opening_stream,json=skipOpeningStream,proto3" json:"skip_opening_stream"`
	SkipClosingStream bool             `protobuf:"varint,20,opt,name=skip_closing_stream,json=skipClosingStream,proto3" json:"skip_closing_stream"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UnitStep) Reset() {
	*x = UnitStep{}
	mi := &file_proto_execution_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitStep) ProtoMessage() {}

func (x *UnitStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitStep.ProtoReflect.Descriptor instead.
func (*UnitStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{11}
}

func (x *UnitStep) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitStep) GetSkipOpeningStream() bool {
	if x != nil {
		return x.SkipOpeningStream
	}
	return false
}

func (x *UnitStep) GetSkipClosingStream() bool {
	if x != nil {
		return x.SkipClosingStream
	}
	return false
}

func (x *UnitStep) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UnitStep) GetStep() isUnitStep_Step {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *UnitStep) GetRun() *RunStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_Run); ok {
			return x.Run
		}
	}
	return nil
}

func (x *UnitStep) GetSaveCache() *SaveCacheStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_SaveCache); ok {
			return x.SaveCache
		}
	}
	return nil
}

func (x *UnitStep) GetRestoreCache() *RestoreCacheStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_RestoreCache); ok {
			return x.RestoreCache
		}
	}
	return nil
}

func (x *UnitStep) GetPublishArtifacts() *PublishArtifactsStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_PublishArtifacts); ok {
			return x.PublishArtifacts
		}
	}
	return nil
}

func (x *UnitStep) GetPlugin() *PluginStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_Plugin); ok {
			return x.Plugin
		}
	}
	return nil
}

func (x *UnitStep) GetRunTests() *RunTestsStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_RunTests); ok {
			return x.RunTests
		}
	}
	return nil
}

func (x *UnitStep) GetExecuteTask() *ExecuteStep {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_ExecuteTask); ok {
			return x.ExecuteTask
		}
	}
	return nil
}

func (x *UnitStep) GetRunTestStepV2() *RunTestStepV2 {
	if x != nil {
		if x, ok := x.Step.(*UnitStep_RunTestStepV2); ok {
			return x.RunTestStepV2
		}
	}
	return nil
}

func (x *UnitStep) GetCallbackToken() string {
	if x != nil {
		return x.CallbackToken
	}
	return ""
}

func (x *UnitStep) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UnitStep) GetSkipCondition() string {
	if x != nil {
		return x.SkipCondition
	}
	return ""
}

func (x *UnitStep) GetLogKey() string {
	if x != nil {
		return x.LogKey
	}
	return ""
}

func (x *UnitStep) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UnitStep) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *UnitStep) GetConnectorSecrets() map[string]string {
	if x != nil {
		return x.ConnectorSecrets
	}
	return nil
}

func (x *UnitStep) GetRuntimeSecrets() []string {
	if x != nil {
		return x.RuntimeSecrets
	}
	return nil
}

type isUnitStep_Step interface {
	isUnitStep_Step()
}

type UnitStep_Run struct {
	Run *RunStep `protobuf:"bytes,3,opt,name=run,proto3,oneof"`
}

type UnitStep_SaveCache struct {
	SaveCache *SaveCacheStep `protobuf:"bytes,4,opt,name=save_cache,json=saveCache,proto3,oneof"`
}

type UnitStep_RestoreCache struct {
	RestoreCache *RestoreCacheStep `protobuf:"bytes,5,opt,name=restore_cache,json=restoreCache,proto3,oneof"`
}

type UnitStep_PublishArtifacts struct {
	PublishArtifacts *PublishArtifactsStep `protobuf:"bytes,6,opt,name=publish_artifacts,json=publishArtifacts,proto3,oneof"`
}

type UnitStep_Plugin struct {
	Plugin *PluginStep `protobuf:"bytes,9,opt,name=plugin,proto3,oneof"`
}

type UnitStep_RunTests struct {
	RunTests *RunTestsStep `protobuf:"bytes,10,opt,name=runTests,proto3,oneof"`
}

type UnitStep_ExecuteTask struct {
	ExecuteTask *ExecuteStep `protobuf:"bytes,15,opt,name=executeTask,proto3,oneof"`
}

type UnitStep_RunTestStepV2 struct {
	RunTestStepV2 *RunTestStepV2 `protobuf:"bytes,16,opt,name=runTestStepV2,proto3,oneof"`
}

func (*UnitStep_Run) isUnitStep_Step() {}

func (*UnitStep_SaveCache) isUnitStep_Step() {}

func (*UnitStep_RestoreCache) isUnitStep_Step() {}

func (*UnitStep_PublishArtifacts) isUnitStep_Step() {}

func (*UnitStep_Plugin) isUnitStep_Step() {}

func (*UnitStep_RunTests) isUnitStep_Step() {}

func (*UnitStep_ExecuteTask) isUnitStep_Step() {}

func (*UnitStep_RunTestStepV2) isUnitStep_Step() {}

type ParallelStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Steps         []*UnitStep            `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParallelStep) Reset() {
	*x = ParallelStep{}
	mi := &file_proto_execution_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParallelStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelStep) ProtoMessage() {}

func (x *ParallelStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelStep.ProtoReflect.Descriptor instead.
func (*ParallelStep) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{12}
}

func (x *ParallelStep) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ParallelStep) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ParallelStep) GetSteps() []*UnitStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type Step struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Step:
	//
	//	*Step_Parallel
	//	*Step_Unit
	Step          isStep_Step `protobuf_oneof:"step"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Step) Reset() {
	*x = Step{}
	mi := &file_proto_execution_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{13}
}

func (x *Step) GetStep() isStep_Step {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *Step) GetParallel() *ParallelStep {
	if x != nil {
		if x, ok := x.Step.(*Step_Parallel); ok {
			return x.Parallel
		}
	}
	return nil
}

func (x *Step) GetUnit() *UnitStep {
	if x != nil {
		if x, ok := x.Step.(*Step_Unit); ok {
			return x.Unit
		}
	}
	return nil
}

type isStep_Step interface {
	isStep_Step()
}

type Step_Parallel struct {
	Parallel *ParallelStep `protobuf:"bytes,1,opt,name=parallel,proto3,oneof"`
}

type Step_Unit struct {
	Unit *UnitStep `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

func (*Step_Parallel) isStep_Step() {}

func (*Step_Unit) isStep_Step() {}

type Execution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         []*Step                `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution) Reset() {
	*x = Execution{}
	mi := &file_proto_execution_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{14}
}

func (x *Execution) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Execution) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type UpdateStateRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Action        UpdateStateRequest_Action `protobuf:"varint,1,opt,name=action,proto3,enum=io.harness.product.ci.engine.proto.UpdateStateRequest_Action" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStateRequest) Reset() {
	*x = UpdateStateRequest{}
	mi := &file_proto_execution_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateRequest) ProtoMessage() {}

func (x *UpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateStateRequest) GetAction() UpdateStateRequest_Action {
	if x != nil {
		return x.Action
	}
	return UpdateStateRequest_UNKNOWN
}

type UpdateStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStateResponse) Reset() {
	*x = UpdateStateResponse{}
	mi := &file_proto_execution_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateResponse) ProtoMessage() {}

func (x *UpdateStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{16}
}

type GetImageEntrypointRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image         string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Secret        string                 `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"` // docker config secret for image
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetImageEntrypointRequest) Reset() {
	*x = GetImageEntrypointRequest{}
	mi := &file_proto_execution_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageEntrypointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageEntrypointRequest) ProtoMessage() {}

func (x *GetImageEntrypointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageEntrypointRequest.ProtoReflect.Descriptor instead.
func (*GetImageEntrypointRequest) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{17}
}

func (x *GetImageEntrypointRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetImageEntrypointRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetImageEntrypointRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type GetImageEntrypointResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entrypoint    []string               `protobuf:"bytes,1,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetImageEntrypointResponse) Reset() {
	*x = GetImageEntrypointResponse{}
	mi := &file_proto_execution_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageEntrypointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageEntrypointResponse) ProtoMessage() {}

func (x *GetImageEntrypointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageEntrypointResponse.ProtoReflect.Descriptor instead.
func (*GetImageEntrypointResponse) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{18}
}

func (x *GetImageEntrypointResponse) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *GetImageEntrypointResponse) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type StepOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        map[string]string      `protobuf:"bytes,2,rep,name=output,proto3" json:"output,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepOutput) Reset() {
	*x = StepOutput{}
	mi := &file_proto_execution_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepOutput) ProtoMessage() {}

func (x *StepOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepOutput.ProtoReflect.Descriptor instead.
func (*StepOutput) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{19}
}

func (x *StepOutput) GetOutput() map[string]string {
	if x != nil {
		return x.Output
	}
	return nil
}

type EvaluateJEXLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepId        string                 `protobuf:"bytes,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Expressions   []string               `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	StepOutputs   map[string]*StepOutput `protobuf:"bytes,3,rep,name=step_outputs,json=stepOutputs,proto3" json:"step_outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Output of all the previously executed steps of a stage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluateJEXLRequest) Reset() {
	*x = EvaluateJEXLRequest{}
	mi := &file_proto_execution_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateJEXLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateJEXLRequest) ProtoMessage() {}

func (x *EvaluateJEXLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateJEXLRequest.ProtoReflect.Descriptor instead.
func (*EvaluateJEXLRequest) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{20}
}

func (x *EvaluateJEXLRequest) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

func (x *EvaluateJEXLRequest) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *EvaluateJEXLRequest) GetStepOutputs() map[string]*StepOutput {
	if x != nil {
		return x.StepOutputs
	}
	return nil
}

type EvaluateJEXLResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	EvaluatedExpressions map[string]string      `protobuf:"bytes,1,rep,name=evaluated_expressions,json=evaluatedExpressions,proto3" json:"evaluated_expressions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // expression is key & value is evaluated expression
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EvaluateJEXLResponse) Reset() {
	*x = EvaluateJEXLResponse{}
	mi := &file_proto_execution_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateJEXLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateJEXLResponse) ProtoMessage() {}

func (x *EvaluateJEXLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateJEXLResponse.ProtoReflect.Descriptor instead.
func (*EvaluateJEXLResponse) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{21}
}

func (x *EvaluateJEXLResponse) GetEvaluatedExpressions() map[string]string {
	if x != nil {
		return x.EvaluatedExpressions
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_proto_execution_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{22}
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_proto_execution_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{23}
}

type ExecuteStepRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ExecutionId         string                 `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Step                *UnitStep              `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	TmpFilePath         string                 `protobuf:"bytes,3,opt,name=tmp_file_path,json=tmpFilePath,proto3" json:"tmp_file_path,omitempty"`
	DelegateSvcEndpoint string                 `protobuf:"bytes,4,opt,name=delegate_svc_endpoint,json=delegateSvcEndpoint,proto3" json:"delegate_svc_endpoint,omitempty"`
	ManagerSvcEndpoint  string                 `protobuf:"bytes,5,opt,name=manager_svc_endpoint,json=managerSvcEndpoint,proto3" json:"manager_svc_endpoint,omitempty"`
	AccountKey          string                 `protobuf:"bytes,6,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	ManagerUrl          string                 `protobuf:"bytes,7,opt,name=manager_url,json=managerUrl,proto3" json:"manager_url,omitempty"`
	DelegateId          string                 `protobuf:"bytes,8,opt,name=delegate_id,json=delegateId,proto3" json:"delegate_id,omitempty"`
	MarkerFileUuid      string                 `protobuf:"bytes,9,opt,name=marker_file_uuid,json=markerFileUuid,proto3" json:"marker_file_uuid,omitempty"`
	IsRunner            bool                   `protobuf:"varint,10,opt,name=is_runner,json=isRunner,proto3" json:"is_runner,omitempty"` // Used for sending runner task response instead of delegate's
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExecuteStepRequest) Reset() {
	*x = ExecuteStepRequest{}
	mi := &file_proto_execution_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStepRequest) ProtoMessage() {}

func (x *ExecuteStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStepRequest.ProtoReflect.Descriptor instead.
func (*ExecuteStepRequest) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{24}
}

func (x *ExecuteStepRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ExecuteStepRequest) GetStep() *UnitStep {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *ExecuteStepRequest) GetTmpFilePath() string {
	if x != nil {
		return x.TmpFilePath
	}
	return ""
}

func (x *ExecuteStepRequest) GetDelegateSvcEndpoint() string {
	if x != nil {
		return x.DelegateSvcEndpoint
	}
	return ""
}

func (x *ExecuteStepRequest) GetManagerSvcEndpoint() string {
	if x != nil {
		return x.ManagerSvcEndpoint
	}
	return ""
}

func (x *ExecuteStepRequest) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *ExecuteStepRequest) GetManagerUrl() string {
	if x != nil {
		return x.ManagerUrl
	}
	return ""
}

func (x *ExecuteStepRequest) GetDelegateId() string {
	if x != nil {
		return x.DelegateId
	}
	return ""
}

func (x *ExecuteStepRequest) GetMarkerFileUuid() string {
	if x != nil {
		return x.MarkerFileUuid
	}
	return ""
}

func (x *ExecuteStepRequest) GetIsRunner() bool {
	if x != nil {
		return x.IsRunner
	}
	return false
}

type ExecuteStepResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteStepResponse) Reset() {
	*x = ExecuteStepResponse{}
	mi := &file_proto_execution_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStepResponse) ProtoMessage() {}

func (x *ExecuteStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStepResponse.ProtoReflect.Descriptor instead.
func (*ExecuteStepResponse) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{25}
}

type OutputVariablesWrapper struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OutputVariables []*OutputVariable      `protobuf:"bytes,1,rep,name=output_variables,json=outputVariables,proto3" json:"output_variables,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OutputVariablesWrapper) Reset() {
	*x = OutputVariablesWrapper{}
	mi := &file_proto_execution_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputVariablesWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputVariablesWrapper) ProtoMessage() {}

func (x *OutputVariablesWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputVariablesWrapper.ProtoReflect.Descriptor instead.
func (*OutputVariablesWrapper) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{26}
}

func (x *OutputVariablesWrapper) GetOutputVariables() []*OutputVariable {
	if x != nil {
		return x.OutputVariables
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_proto_execution_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_proto_execution_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_proto_execution_proto_rawDescGZIP(), []int{27}
}

func (x *File) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_proto_execution_proto protoreflect.FileDescriptor

const file_proto_execution_proto_rawDesc = "" +
	"\n" +
	"\x15proto/execution.proto\x12\"io.harness.product.ci.engine.proto\x1a\x1cproto/publish_artifact.proto\"d\n" +
	"\vStepContext\x12\x1f\n" +
	"\vnum_retries\x18\x01 \x01(\x05R\n" +
	"numRetries\x124\n" +
	"\x16execution_timeout_secs\x18\x02 \x01(\x03R\x14executionTimeoutSecs\"\xab\x01\n" +
	"\x14PublishArtifactsStep\x12D\n" +
	"\x05files\x18\x01 \x03(\v2..io.harness.product.ci.engine.proto.UploadFileR\x05files\x12M\n" +
	"\x06images\x18\x02 \x03(\v25.io.harness.product.ci.engine.proto.BuildPublishImageR\x06images\"\x83\x01\n" +
	"\x06Report\x12C\n" +
	"\x04type\x18\x02 \x01(\x0e2/.io.harness.product.ci.engine.proto.Report.TypeR\x04type\x12\x14\n" +
	"\x05paths\x18\x03 \x03(\tR\x05paths\"\x1e\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\t\n" +
	"\x05JUNIT\x10\x01\"\xf3\b\n" +
	"\fRunTestsStep\x12\x12\n" +
	"\x04args\x18\x01 \x01(\tR\x04args\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x1c\n" +
	"\tbuildTool\x18\x03 \x01(\tR\tbuildTool\x12(\n" +
	"\x0ftestAnnotations\x18\x04 \x01(\tR\x0ftestAnnotations\x12\x1a\n" +
	"\bpackages\x18\x05 \x01(\tR\bpackages\x122\n" +
	"\x14runOnlySelectedTests\x18\x06 \x01(\bR\x14runOnlySelectedTests\x12I\n" +
	"\acontext\x18\a \x01(\v2/.io.harness.product.ci.engine.proto.StepContextR\acontext\x12%\n" +
	"\x0econtainer_port\x18\b \x01(\rR\rcontainerPort\x12D\n" +
	"\areports\x18\t \x03(\v2*.io.harness.product.ci.engine.proto.ReportR\areports\x12&\n" +
	"\x0epreTestCommand\x18\n" +
	" \x01(\tR\x0epreTestCommand\x12(\n" +
	"\x0fpostTestCommand\x18\v \x01(\tR\x0fpostTestCommand\x12$\n" +
	"\renvVarOutputs\x18\f \x03(\tR\renvVarOutputs\x12\x1d\n" +
	"\n" +
	"diff_files\x18\r \x01(\tR\tdiffFiles\x12c\n" +
	"\venvironment\x18\x0e \x03(\v2A.io.harness.product.ci.engine.proto.RunTestsStep.EnvironmentEntryR\venvironment\x12*\n" +
	"\x10buildEnvironment\x18\x0f \x01(\tR\x10buildEnvironment\x12*\n" +
	"\x10frameworkVersion\x18\x10 \x01(\tR\x10frameworkVersion\x12\x1e\n" +
	"\n" +
	"namespaces\x18\x11 \x01(\tR\n" +
	"namespaces\x12.\n" +
	"\x13test_split_strategy\x18\x12 \x01(\tR\x11testSplitStrategy\x12+\n" +
	"\x11parallelize_tests\x18\x13 \x01(\bR\x10parallelizeTests\x12\x1d\n" +
	"\n" +
	"test_globs\x18\x14 \x01(\tR\ttestGlobs\x12$\n" +
	"\rpythonVersion\x18\x15 \x01(\tR\rpythonVersion\x12\x1a\n" +
	"\btestRoot\x18\x16 \x01(\tR\btestRoot\x12L\n" +
	"\aoutputs\x18\x17 \x03(\v22.io.harness.product.ci.engine.proto.OutputVariableR\aoutputs\x12#\n" +
	"\rparse_savings\x18\x18 \x01(\bR\fparseSavings\x1a>\n" +
	"\x10EnvironmentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa8\x06\n" +
	"\aRunStep\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12I\n" +
	"\acontext\x18\x02 \x01(\v2/.io.harness.product.ci.engine.proto.StepContextR\acontext\x12&\n" +
	"\x0fenv_var_outputs\x18\x03 \x03(\tR\renvVarOutputs\x12%\n" +
	"\x0econtainer_port\x18\x04 \x01(\rR\rcontainerPort\x12D\n" +
	"\areports\x18\x05 \x03(\v2*.io.harness.product.ci.engine.proto.ReportR\areports\x12^\n" +
	"\venvironment\x18\x06 \x03(\v2<.io.harness.product.ci.engine.proto.RunStep.EnvironmentEntryR\venvironment\x12L\n" +
	"\n" +
	"shell_type\x18\a \x01(\x0e2-.io.harness.product.ci.engine.proto.ShellTypeR\tshellType\x12\x16\n" +
	"\x06detach\x18\b \x01(\bR\x06detach\x12\x1e\n" +
	"\n" +
	"entrypoint\x18\t \x03(\tR\n" +
	"entrypoint\x12\x14\n" +
	"\x05image\x18\n" +
	" \x01(\tR\x05image\x12L\n" +
	"\aoutputs\x18\v \x03(\v22.io.harness.product.ci.engine.proto.OutputVariableR\aoutputs\x12#\n" +
	"\rparse_savings\x18\f \x01(\bR\fparseSavings\x124\n" +
	"\x16script_secrets_runtime\x18\r \x01(\bR\x14scriptSecretsRuntime\x12>\n" +
	"\x05files\x18\x0e \x03(\v2(.io.harness.product.ci.engine.proto.FileR\x05files\x1a>\n" +
	"\x10EnvironmentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb1\x01\n" +
	"\x0eOutputVariable\x12Q\n" +
	"\x04type\x18\x02 \x01(\x0e2=.io.harness.product.ci.engine.proto.OutputVariable.OutputTypeR\x04type\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x04 \x01(\tR\x05value\"$\n" +
	"\n" +
	"OutputType\x12\n" +
	"\n" +
	"\x06STRING\x10\x00\x12\n" +
	"\n" +
	"\x06SECRET\x10\x01\"\x88\x06\n" +
	"\rRunTestStepV2\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12I\n" +
	"\acontext\x18\x02 \x01(\v2/.io.harness.product.ci.engine.proto.StepContextR\acontext\x12&\n" +
	"\x0fenv_var_outputs\x18\x03 \x03(\tR\renvVarOutputs\x12%\n" +
	"\x0econtainer_port\x18\x04 \x01(\rR\rcontainerPort\x12D\n" +
	"\areports\x18\x05 \x03(\v2*.io.harness.product.ci.engine.proto.ReportR\areports\x12d\n" +
	"\venvironment\x18\x06 \x03(\v2B.io.harness.product.ci.engine.proto.RunTestStepV2.EnvironmentEntryR\venvironment\x12L\n" +
	"\n" +
	"shell_type\x18\a \x01(\x0e2-.io.harness.product.ci.engine.proto.ShellTypeR\tshellType\x12\x1e\n" +
	"\n" +
	"entrypoint\x18\b \x03(\tR\n" +
	"entrypoint\x12\x14\n" +
	"\x05image\x18\t \x01(\tR\x05image\x12L\n" +
	"\aoutputs\x18\n" +
	" \x03(\v22.io.harness.product.ci.engine.proto.OutputVariableR\aoutputs\x12\x1d\n" +
	"\n" +
	"diff_files\x18\v \x01(\tR\tdiffFiles\x12+\n" +
	"\x11intelligence_mode\x18\f \x01(\bR\x10intelligenceMode\x12\x14\n" +
	"\x05globs\x18\r \x03(\tR\x05globs\x12#\n" +
	"\rparse_savings\x18\x0e \x01(\bR\fparseSavings\x1a>\n" +
	"\x10EnvironmentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x98\x04\n" +
	"\n" +
	"PluginStep\x12\x14\n" +
	"\x05image\x18\x01 \x01(\tR\x05image\x12I\n" +
	"\acontext\x18\x02 \x01(\v2/.io.harness.product.ci.engine.proto.StepContextR\acontext\x12%\n" +
	"\x0econtainer_port\x18\x03 \x01(\rR\rcontainerPort\x12\x1e\n" +
	"\n" +
	"entrypoint\x18\x04 \x03(\tR\n" +
	"entrypoint\x12a\n" +
	"\venvironment\x18\x05 \x03(\v2?.io.harness.product.ci.engine.proto.PluginStep.EnvironmentEntryR\venvironment\x12,\n" +
	"\x12artifact_file_path\x18\x06 \x01(\tR\x10artifactFilePath\x12D\n" +
	"\areports\x18\a \x03(\v2*.io.harness.product.ci.engine.proto.ReportR\areports\x12&\n" +
	"\x0fenv_var_outputs\x18\b \x03(\tR\renvVarOutputs\x12#\n" +
	"\rparse_savings\x18\t \x01(\bR\fparseSavings\x1a>\n" +
	"\x10EnvironmentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"7\n" +
	"\rSaveCacheStep\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05paths\x18\x02 \x03(\tR\x05paths\"O\n" +
	"\x10RestoreCacheStep\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x11fail_if_not_exist\x18\x02 \x01(\bR\x0efailIfNotExist\"\xd5\x01\n" +
	"\vExecuteStep\x12'\n" +
	"\x0ftask_parameters\x18\x01 \x01(\fR\x0etaskParameters\x12'\n" +
	"\x0fexecute_command\x18\x02 \x01(\tR\x0eexecuteCommand\x12L\n" +
	"\n" +
	"shell_type\x18\x03 \x01(\x0e2-.io.harness.product.ci.engine.proto.ShellTypeR\tshellType\x12&\n" +
	"\x0fenv_var_outputs\x18\x04 \x03(\tR\renvVarOutputs\"\x8f\t\n" +
	"\bUnitStep\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12?\n" +
	"\x03run\x18\x03 \x01(\v2+.io.harness.product.ci.engine.proto.RunStepH\x00R\x03run\x12R\n" +
	"\n" +
	"save_cache\x18\x04 \x01(\v21.io.harness.product.ci.engine.proto.SaveCacheStepH\x00R\tsaveCache\x12[\n" +
	"\rrestore_cache\x18\x05 \x01(\v24.io.harness.product.ci.engine.proto.RestoreCacheStepH\x00R\frestoreCache\x12g\n" +
	"\x11publish_artifacts\x18\x06 \x01(\v28.io.harness.product.ci.engine.proto.PublishArtifactsStepH\x00R\x10publishArtifacts\x12H\n" +
	"\x06plugin\x18\t \x01(\v2..io.harness.product.ci.engine.proto.PluginStepH\x00R\x06plugin\x12N\n" +
	"\brunTests\x18\n" +
	" \x01(\v20.io.harness.product.ci.engine.proto.RunTestsStepH\x00R\brunTests\x12S\n" +
	"\vexecuteTask\x18\x0f \x01(\v2/.io.harness.product.ci.engine.proto.ExecuteStepH\x00R\vexecuteTask\x12Y\n" +
	"\rrunTestStepV2\x18\x10 \x01(\v21.io.harness.product.ci.engine.proto.RunTestStepV2H\x00R\rrunTestStepV2\x12%\n" +
	"\x0ecallback_token\x18\a \x01(\tR\rcallbackToken\x12\x17\n" +
	"\atask_id\x18\b \x01(\tR\x06taskId\x12%\n" +
	"\x0eskip_condition\x18\v \x01(\tR\rskipCondition\x12\x17\n" +
	"\alog_key\x18\f \x01(\tR\x06logKey\x12\x1d\n" +
	"\n" +
	"account_id\x18\r \x01(\tR\taccountId\x12%\n" +
	"\x0econtainer_port\x18\x0e \x01(\rR\rcontainerPort\x12o\n" +
	"\x11connector_secrets\x18\x12 \x03(\v2B.io.harness.product.ci.engine.proto.UnitStep.ConnectorSecretsEntryR\x10connectorSecrets\x12'\n" +
	"\x0fruntime_secrets\x18\x11 \x03(\tR\x0eruntimeSecrets\x1aC\n" +
	"\x15ConnectorSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x06\n" +
	"\x04step\"\x85\x01\n" +
	"\fParallelStep\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12B\n" +
	"\x05steps\x18\x03 \x03(\v2,.io.harness.product.ci.engine.proto.UnitStepR\x05steps\"\xa2\x01\n" +
	"\x04Step\x12N\n" +
	"\bparallel\x18\x01 \x01(\v20.io.harness.product.ci.engine.proto.ParallelStepH\x00R\bparallel\x12B\n" +
	"\x04unit\x18\x02 \x01(\v2,.io.harness.product.ci.engine.proto.UnitStepH\x00R\x04unitB\x06\n" +
	"\x04step\"j\n" +
	"\tExecution\x12>\n" +
	"\x05steps\x18\x01 \x03(\v2(.io.harness.product.ci.engine.proto.StepR\x05steps\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\tR\taccountId\"\x99\x01\n" +
	"\x12UpdateStateRequest\x12U\n" +
	"\x06action\x18\x01 \x01(\x0e2=.io.harness.product.ci.engine.proto.UpdateStateRequest.ActionR\x06action\",\n" +
	"\x06Action\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\t\n" +
	"\x05PAUSE\x10\x01\x12\n" +
	"\n" +
	"\x06RESUME\x10\x02\"\x15\n" +
	"\x13UpdateStateResponse\"Y\n" +
	"\x19GetImageEntrypointRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12\x16\n" +
	"\x06secret\x18\x03 \x01(\tR\x06secret\"P\n" +
	"\x1aGetImageEntrypointResponse\x12\x1e\n" +
	"\n" +
	"entrypoint\x18\x01 \x03(\tR\n" +
	"entrypoint\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\"\x9b\x01\n" +
	"\n" +
	"StepOutput\x12R\n" +
	"\x06output\x18\x02 \x03(\v2:.io.harness.product.ci.engine.proto.StepOutput.OutputEntryR\x06output\x1a9\n" +
	"\vOutputEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xad\x02\n" +
	"\x13EvaluateJEXLRequest\x12\x17\n" +
	"\astep_id\x18\x01 \x01(\tR\x06stepId\x12 \n" +
	"\vexpressions\x18\x02 \x03(\tR\vexpressions\x12k\n" +
	"\fstep_outputs\x18\x03 \x03(\v2H.io.harness.product.ci.engine.proto.EvaluateJEXLRequest.StepOutputsEntryR\vstepOutputs\x1an\n" +
	"\x10StepOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12D\n" +
	"\x05value\x18\x02 \x01(\v2..io.harness.product.ci.engine.proto.StepOutputR\x05value:\x028\x01\"\xe9\x01\n" +
	"\x14EvaluateJEXLResponse\x12\x87\x01\n" +
	"\x15evaluated_expressions\x18\x01 \x03(\v2R.io.harness.product.ci.engine.proto.EvaluateJEXLResponse.EvaluatedExpressionsEntryR\x14evaluatedExpressions\x1aG\n" +
	"\x19EvaluatedExpressionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\r\n" +
	"\vPingRequest\"\x0e\n" +
	"\fPingResponse\"\xad\x03\n" +
	"\x12ExecuteStepRequest\x12!\n" +
	"\fexecution_id\x18\x01 \x01(\tR\vexecutionId\x12@\n" +
	"\x04step\x18\x02 \x01(\v2,.io.harness.product.ci.engine.proto.UnitStepR\x04step\x12\"\n" +
	"\rtmp_file_path\x18\x03 \x01(\tR\vtmpFilePath\x122\n" +
	"\x15delegate_svc_endpoint\x18\x04 \x01(\tR\x13delegateSvcEndpoint\x120\n" +
	"\x14manager_svc_endpoint\x18\x05 \x01(\tR\x12managerSvcEndpoint\x12\x1f\n" +
	"\vaccount_key\x18\x06 \x01(\tR\n" +
	"accountKey\x12\x1f\n" +
	"\vmanager_url\x18\a \x01(\tR\n" +
	"managerUrl\x12\x1f\n" +
	"\vdelegate_id\x18\b \x01(\tR\n" +
	"delegateId\x12(\n" +
	"\x10marker_file_uuid\x18\t \x01(\tR\x0emarkerFileUuid\x12\x1b\n" +
	"\tis_runner\x18\n" +
	" \x01(\bR\bisRunner\"\x15\n" +
	"\x13ExecuteStepResponse\"w\n" +
	"\x16OutputVariablesWrapper\x12]\n" +
	"\x10output_variables\x18\x01 \x03(\v22.io.harness.product.ci.engine.proto.OutputVariableR\x0foutputVariables\".\n" +
	"\x04File\x12\x12\n" +
	"\x04data\x18\x01 \x01(\tR\x04data\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path*_\n" +
	"\tShellType\x12\x06\n" +
	"\x02SH\x10\x00\x12\b\n" +
	"\x04BASH\x10\x01\x12\x0e\n" +
	"\n" +
	"POWERSHELL\x10\x02\x12\b\n" +
	"\x04PWSH\x10\x03\x12\n" +
	"\n" +
	"\x06PYTHON\x10\x04\x12\x1a\n" +
	"\x16SHELL_TYPE_UNSPECIFIED\x10\x052\x91\x05\n" +
	"\n" +
	"LiteEngine\x12~\n" +
	"\vUpdateState\x126.io.harness.product.ci.engine.proto.UpdateStateRequest\x1a7.io.harness.product.ci.engine.proto.UpdateStateResponse\x12\x93\x01\n" +
	"\x12GetImageEntrypoint\x12=.io.harness.product.ci.engine.proto.GetImageEntrypointRequest\x1a>.io.harness.product.ci.engine.proto.GetImageEntrypointResponse\x12\x81\x01\n" +
	"\fEvaluateJEXL\x127.io.harness.product.ci.engine.proto.EvaluateJEXLRequest\x1a8.io.harness.product.ci.engine.proto.EvaluateJEXLResponse\x12i\n" +
	"\x04Ping\x12/.io.harness.product.ci.engine.proto.PingRequest\x1a0.io.harness.product.ci.engine.proto.PingResponse\x12~\n" +
	"\vExecuteStep\x126.io.harness.product.ci.engine.proto.ExecuteStepRequest\x1a7.io.harness.product.ci.engine.proto.ExecuteStepResponseB;P\x01Z7github.com/drone/go-task/k8s-engine-commons/proto;protob\x06proto3"

var (
	file_proto_execution_proto_rawDescOnce sync.Once
	file_proto_execution_proto_rawDescData []byte
)

func file_proto_execution_proto_rawDescGZIP() []byte {
	file_proto_execution_proto_rawDescOnce.Do(func() {
		file_proto_execution_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_execution_proto_rawDesc), len(file_proto_execution_proto_rawDesc)))
	})
	return file_proto_execution_proto_rawDescData
}

var file_proto_execution_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_proto_execution_proto_goTypes = []any{
	(ShellType)(0),                     // 0: io.harness.product.ci.engine.proto.ShellType
	(Report_Type)(0),                   // 1: io.harness.product.ci.engine.proto.Report.Type
	(OutputVariable_OutputType)(0),     // 2: io.harness.product.ci.engine.proto.OutputVariable.OutputType
	(UpdateStateRequest_Action)(0),     // 3: io.harness.product.ci.engine.proto.UpdateStateRequest.Action
	(*StepContext)(nil),                // 4: io.harness.product.ci.engine.proto.StepContext
	(*PublishArtifactsStep)(nil),       // 5: io.harness.product.ci.engine.proto.PublishArtifactsStep
	(*Report)(nil),                     // 6: io.harness.product.ci.engine.proto.Report
	(*RunTestsStep)(nil),               // 7: io.harness.product.ci.engine.proto.RunTestsStep
	(*RunStep)(nil),                    // 8: io.harness.product.ci.engine.proto.RunStep
	(*OutputVariable)(nil),             // 9: io.harness.product.ci.engine.proto.OutputVariable
	(*RunTestStepV2)(nil),              // 10: io.harness.product.ci.engine.proto.RunTestStepV2
	(*PluginStep)(nil),                 // 11: io.harness.product.ci.engine.proto.PluginStep
	(*SaveCacheStep)(nil),              // 12: io.harness.product.ci.engine.proto.SaveCacheStep
	(*RestoreCacheStep)(nil),           // 13: io.harness.product.ci.engine.proto.RestoreCacheStep
	(*ExecuteStep)(nil),                // 14: io.harness.product.ci.engine.proto.ExecuteStep
	(*UnitStep)(nil),                   // 15: io.harness.product.ci.engine.proto.UnitStep
	(*ParallelStep)(nil),               // 16: io.harness.product.ci.engine.proto.ParallelStep
	(*Step)(nil),                       // 17: io.harness.product.ci.engine.proto.Step
	(*Execution)(nil),                  // 18: io.harness.product.ci.engine.proto.Execution
	(*UpdateStateRequest)(nil),         // 19: io.harness.product.ci.engine.proto.UpdateStateRequest
	(*UpdateStateResponse)(nil),        // 20: io.harness.product.ci.engine.proto.UpdateStateResponse
	(*GetImageEntrypointRequest)(nil),  // 21: io.harness.product.ci.engine.proto.GetImageEntrypointRequest
	(*GetImageEntrypointResponse)(nil), // 22: io.harness.product.ci.engine.proto.GetImageEntrypointResponse
	(*StepOutput)(nil),                 // 23: io.harness.product.ci.engine.proto.StepOutput
	(*EvaluateJEXLRequest)(nil),        // 24: io.harness.product.ci.engine.proto.EvaluateJEXLRequest
	(*EvaluateJEXLResponse)(nil),       // 25: io.harness.product.ci.engine.proto.EvaluateJEXLResponse
	(*PingRequest)(nil),                // 26: io.harness.product.ci.engine.proto.PingRequest
	(*PingResponse)(nil),               // 27: io.harness.product.ci.engine.proto.PingResponse
	(*ExecuteStepRequest)(nil),         // 28: io.harness.product.ci.engine.proto.ExecuteStepRequest
	(*ExecuteStepResponse)(nil),        // 29: io.harness.product.ci.engine.proto.ExecuteStepResponse
	(*OutputVariablesWrapper)(nil),     // 30: io.harness.product.ci.engine.proto.OutputVariablesWrapper
	(*File)(nil),                       // 31: io.harness.product.ci.engine.proto.File
	nil,                                // 32: io.harness.product.ci.engine.proto.RunTestsStep.EnvironmentEntry
	nil,                                // 33: io.harness.product.ci.engine.proto.RunStep.EnvironmentEntry
	nil,                                // 34: io.harness.product.ci.engine.proto.RunTestStepV2.EnvironmentEntry
	nil,                                // 35: io.harness.product.ci.engine.proto.PluginStep.EnvironmentEntry
	nil,                                // 36: io.harness.product.ci.engine.proto.UnitStep.ConnectorSecretsEntry
	nil,                                // 37: io.harness.product.ci.engine.proto.StepOutput.OutputEntry
	nil,                                // 38: io.harness.product.ci.engine.proto.EvaluateJEXLRequest.StepOutputsEntry
	nil,                                // 39: io.harness.product.ci.engine.proto.EvaluateJEXLResponse.EvaluatedExpressionsEntry
	(*UploadFile)(nil),                 // 40: io.harness.product.ci.engine.proto.UploadFile
	(*BuildPublishImage)(nil),          // 41: io.harness.product.ci.engine.proto.BuildPublishImage
}
var file_proto_execution_proto_depIdxs = []int32{
	40, // 0: io.harness.product.ci.engine.proto.PublishArtifactsStep.files:type_name -> io.harness.product.ci.engine.proto.UploadFile
	41, // 1: io.harness.product.ci.engine.proto.PublishArtifactsStep.images:type_name -> io.harness.product.ci.engine.proto.BuildPublishImage
	1,  // 2: io.harness.product.ci.engine.proto.Report.type:type_name -> io.harness.product.ci.engine.proto.Report.Type
	4,  // 3: io.harness.product.ci.engine.proto.RunTestsStep.context:type_name -> io.harness.product.ci.engine.proto.StepContext
	6,  // 4: io.harness.product.ci.engine.proto.RunTestsStep.reports:type_name -> io.harness.product.ci.engine.proto.Report
	32, // 5: io.harness.product.ci.engine.proto.RunTestsStep.environment:type_name -> io.harness.product.ci.engine.proto.RunTestsStep.EnvironmentEntry
	9,  // 6: io.harness.product.ci.engine.proto.RunTestsStep.outputs:type_name -> io.harness.product.ci.engine.proto.OutputVariable
	4,  // 7: io.harness.product.ci.engine.proto.RunStep.context:type_name -> io.harness.product.ci.engine.proto.StepContext
	6,  // 8: io.harness.product.ci.engine.proto.RunStep.reports:type_name -> io.harness.product.ci.engine.proto.Report
	33, // 9: io.harness.product.ci.engine.proto.RunStep.environment:type_name -> io.harness.product.ci.engine.proto.RunStep.EnvironmentEntry
	0,  // 10: io.harness.product.ci.engine.proto.RunStep.shell_type:type_name -> io.harness.product.ci.engine.proto.ShellType
	9,  // 11: io.harness.product.ci.engine.proto.RunStep.outputs:type_name -> io.harness.product.ci.engine.proto.OutputVariable
	31, // 12: io.harness.product.ci.engine.proto.RunStep.files:type_name -> io.harness.product.ci.engine.proto.File
	2,  // 13: io.harness.product.ci.engine.proto.OutputVariable.type:type_name -> io.harness.product.ci.engine.proto.OutputVariable.OutputType
	4,  // 14: io.harness.product.ci.engine.proto.RunTestStepV2.context:type_name -> io.harness.product.ci.engine.proto.StepContext
	6,  // 15: io.harness.product.ci.engine.proto.RunTestStepV2.reports:type_name -> io.harness.product.ci.engine.proto.Report
	34, // 16: io.harness.product.ci.engine.proto.RunTestStepV2.environment:type_name -> io.harness.product.ci.engine.proto.RunTestStepV2.EnvironmentEntry
	0,  // 17: io.harness.product.ci.engine.proto.RunTestStepV2.shell_type:type_name -> io.harness.product.ci.engine.proto.ShellType
	9,  // 18: io.harness.product.ci.engine.proto.RunTestStepV2.outputs:type_name -> io.harness.product.ci.engine.proto.OutputVariable
	4,  // 19: io.harness.product.ci.engine.proto.PluginStep.context:type_name -> io.harness.product.ci.engine.proto.StepContext
	35, // 20: io.harness.product.ci.engine.proto.PluginStep.environment:type_name -> io.harness.product.ci.engine.proto.PluginStep.EnvironmentEntry
	6,  // 21: io.harness.product.ci.engine.proto.PluginStep.reports:type_name -> io.harness.product.ci.engine.proto.Report
	0,  // 22: io.harness.product.ci.engine.proto.ExecuteStep.shell_type:type_name -> io.harness.product.ci.engine.proto.ShellType
	8,  // 23: io.harness.product.ci.engine.proto.UnitStep.run:type_name -> io.harness.product.ci.engine.proto.RunStep
	12, // 24: io.harness.product.ci.engine.proto.UnitStep.save_cache:type_name -> io.harness.product.ci.engine.proto.SaveCacheStep
	13, // 25: io.harness.product.ci.engine.proto.UnitStep.restore_cache:type_name -> io.harness.product.ci.engine.proto.RestoreCacheStep
	5,  // 26: io.harness.product.ci.engine.proto.UnitStep.publish_artifacts:type_name -> io.harness.product.ci.engine.proto.PublishArtifactsStep
	11, // 27: io.harness.product.ci.engine.proto.UnitStep.plugin:type_name -> io.harness.product.ci.engine.proto.PluginStep
	7,  // 28: io.harness.product.ci.engine.proto.UnitStep.runTests:type_name -> io.harness.product.ci.engine.proto.RunTestsStep
	14, // 29: io.harness.product.ci.engine.proto.UnitStep.executeTask:type_name -> io.harness.product.ci.engine.proto.ExecuteStep
	10, // 30: io.harness.product.ci.engine.proto.UnitStep.runTestStepV2:type_name -> io.harness.product.ci.engine.proto.RunTestStepV2
	36, // 31: io.harness.product.ci.engine.proto.UnitStep.connector_secrets:type_name -> io.harness.product.ci.engine.proto.UnitStep.ConnectorSecretsEntry
	15, // 32: io.harness.product.ci.engine.proto.ParallelStep.steps:type_name -> io.harness.product.ci.engine.proto.UnitStep
	16, // 33: io.harness.product.ci.engine.proto.Step.parallel:type_name -> io.harness.product.ci.engine.proto.ParallelStep
	15, // 34: io.harness.product.ci.engine.proto.Step.unit:type_name -> io.harness.product.ci.engine.proto.UnitStep
	17, // 35: io.harness.product.ci.engine.proto.Execution.steps:type_name -> io.harness.product.ci.engine.proto.Step
	3,  // 36: io.harness.product.ci.engine.proto.UpdateStateRequest.action:type_name -> io.harness.product.ci.engine.proto.UpdateStateRequest.Action
	37, // 37: io.harness.product.ci.engine.proto.StepOutput.output:type_name -> io.harness.product.ci.engine.proto.StepOutput.OutputEntry
	38, // 38: io.harness.product.ci.engine.proto.EvaluateJEXLRequest.step_outputs:type_name -> io.harness.product.ci.engine.proto.EvaluateJEXLRequest.StepOutputsEntry
	39, // 39: io.harness.product.ci.engine.proto.EvaluateJEXLResponse.evaluated_expressions:type_name -> io.harness.product.ci.engine.proto.EvaluateJEXLResponse.EvaluatedExpressionsEntry
	15, // 40: io.harness.product.ci.engine.proto.ExecuteStepRequest.step:type_name -> io.harness.product.ci.engine.proto.UnitStep
	9,  // 41: io.harness.product.ci.engine.proto.OutputVariablesWrapper.output_variables:type_name -> io.harness.product.ci.engine.proto.OutputVariable
	23, // 42: io.harness.product.ci.engine.proto.EvaluateJEXLRequest.StepOutputsEntry.value:type_name -> io.harness.product.ci.engine.proto.StepOutput
	19, // 43: io.harness.product.ci.engine.proto.LiteEngine.UpdateState:input_type -> io.harness.product.ci.engine.proto.UpdateStateRequest
	21, // 44: io.harness.product.ci.engine.proto.LiteEngine.GetImageEntrypoint:input_type -> io.harness.product.ci.engine.proto.GetImageEntrypointRequest
	24, // 45: io.harness.product.ci.engine.proto.LiteEngine.EvaluateJEXL:input_type -> io.harness.product.ci.engine.proto.EvaluateJEXLRequest
	26, // 46: io.harness.product.ci.engine.proto.LiteEngine.Ping:input_type -> io.harness.product.ci.engine.proto.PingRequest
	28, // 47: io.harness.product.ci.engine.proto.LiteEngine.ExecuteStep:input_type -> io.harness.product.ci.engine.proto.ExecuteStepRequest
	20, // 48: io.harness.product.ci.engine.proto.LiteEngine.UpdateState:output_type -> io.harness.product.ci.engine.proto.UpdateStateResponse
	22, // 49: io.harness.product.ci.engine.proto.LiteEngine.GetImageEntrypoint:output_type -> io.harness.product.ci.engine.proto.GetImageEntrypointResponse
	25, // 50: io.harness.product.ci.engine.proto.LiteEngine.EvaluateJEXL:output_type -> io.harness.product.ci.engine.proto.EvaluateJEXLResponse
	27, // 51: io.harness.product.ci.engine.proto.LiteEngine.Ping:output_type -> io.harness.product.ci.engine.proto.PingResponse
	29, // 52: io.harness.product.ci.engine.proto.LiteEngine.ExecuteStep:output_type -> io.harness.product.ci.engine.proto.ExecuteStepResponse
	48, // [48:53] is the sub-list for method output_type
	43, // [43:48] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_proto_execution_proto_init() }
func file_proto_execution_proto_init() {
	if File_proto_execution_proto != nil {
		return
	}
	file_proto_publish_artifact_proto_init()
	file_proto_execution_proto_msgTypes[11].OneofWrappers = []any{
		(*UnitStep_Run)(nil),
		(*UnitStep_SaveCache)(nil),
		(*UnitStep_RestoreCache)(nil),
		(*UnitStep_PublishArtifacts)(nil),
		(*UnitStep_Plugin)(nil),
		(*UnitStep_RunTests)(nil),
		(*UnitStep_ExecuteTask)(nil),
		(*UnitStep_RunTestStepV2)(nil),
	}
	file_proto_execution_proto_msgTypes[13].OneofWrappers = []any{
		(*Step_Parallel)(nil),
		(*Step_Unit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_execution_proto_rawDesc), len(file_proto_execution_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_execution_proto_goTypes,
		DependencyIndexes: file_proto_execution_proto_depIdxs,
		EnumInfos:         file_proto_execution_proto_enumTypes,
		MessageInfos:      file_proto_execution_proto_msgTypes,
	}.Build()
	File_proto_execution_proto = out.File
	file_proto_execution_proto_goTypes = nil
	file_proto_execution_proto_depIdxs = nil
}
