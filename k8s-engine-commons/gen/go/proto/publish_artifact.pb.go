// Copyright 2021 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/publish_artifact.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LocationType int32

const (
	LocationType_UNKNOWN LocationType = 0 // Default value of enum is 0
	// Artifactories
	LocationType_S3    LocationType = 1
	LocationType_GCS   LocationType = 2
	LocationType_JFROG LocationType = 3
	// Registries
	LocationType_GCR       LocationType = 4
	LocationType_ECR       LocationType = 5
	LocationType_DOCKERHUB LocationType = 6
)

// Enum value maps for LocationType.
var (
	LocationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "S3",
		2: "GCS",
		3: "JFROG",
		4: "GCR",
		5: "ECR",
		6: "DOCKERHUB",
	}
	LocationType_value = map[string]int32{
		"UNKNOWN":   0,
		"S3":        1,
		"GCS":       2,
		"JFROG":     3,
		"GCR":       4,
		"ECR":       5,
		"DOCKERHUB": 6,
	}
)

func (x LocationType) Enum() *LocationType {
	p := new(LocationType)
	*p = x
	return p
}

func (x LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_publish_artifact_proto_enumTypes[0].Descriptor()
}

func (LocationType) Type() protoreflect.EnumType {
	return &file_proto_publish_artifact_proto_enumTypes[0]
}

func (x LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationType.Descriptor instead.
func (LocationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{0}
}

type AuthType int32

const (
	AuthType_BASIC_AUTH  AuthType = 0 // Assumes USERNAME_id and PASSWORD_id to be present
	AuthType_SECRET_FILE AuthType = 1 // Assumes SECRET_PATH_id to be present
	AuthType_ACCESS_KEY  AuthType = 2 // Assumes ACCESS_KEY_id and/or SECRET_KEY_id to be present
)

// Enum value maps for AuthType.
var (
	AuthType_name = map[int32]string{
		0: "BASIC_AUTH",
		1: "SECRET_FILE",
		2: "ACCESS_KEY",
	}
	AuthType_value = map[string]int32{
		"BASIC_AUTH":  0,
		"SECRET_FILE": 1,
		"ACCESS_KEY":  2,
	}
)

func (x AuthType) Enum() *AuthType {
	p := new(AuthType)
	*p = x
	return p
}

func (x AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_publish_artifact_proto_enumTypes[1].Descriptor()
}

func (AuthType) Type() protoreflect.EnumType {
	return &file_proto_publish_artifact_proto_enumTypes[1]
}

func (x AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthType.Descriptor instead.
func (AuthType) EnumDescriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{1}
}

// Task global unique identifier
type TaskId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskId) Reset() {
	*x = TaskId{}
	mi := &file_proto_publish_artifact_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskId) ProtoMessage() {}

func (x *TaskId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_publish_artifact_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskId.ProtoReflect.Descriptor instead.
func (*TaskId) Descriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{0}
}

func (x *TaskId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Details of connector
type Connector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Auth          AuthType               `protobuf:"varint,2,opt,name=auth,proto3,enum=io.harness.product.ci.engine.proto.AuthType" json:"auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connector) Reset() {
	*x = Connector{}
	mi := &file_proto_publish_artifact_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_proto_publish_artifact_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{1}
}

func (x *Connector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connector) GetAuth() AuthType {
	if x != nil {
		return x.Auth
	}
	return AuthType_BASIC_AUTH
}

type BuildPublishImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DockerFile    string                 `protobuf:"bytes,1,opt,name=docker_file,json=dockerFile,proto3" json:"docker_file,omitempty"`
	Context       string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Destination   *Destination           `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildPublishImage) Reset() {
	*x = BuildPublishImage{}
	mi := &file_proto_publish_artifact_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildPublishImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildPublishImage) ProtoMessage() {}

func (x *BuildPublishImage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_publish_artifact_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildPublishImage.ProtoReflect.Descriptor instead.
func (*BuildPublishImage) Descriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{2}
}

func (x *BuildPublishImage) GetDockerFile() string {
	if x != nil {
		return x.DockerFile
	}
	return ""
}

func (x *BuildPublishImage) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *BuildPublishImage) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type UploadFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePattern   string                 `protobuf:"bytes,1,opt,name=file_pattern,json=filePattern,proto3" json:"file_pattern,omitempty"`
	Destination   *Destination           `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"` // location to copy the file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFile) Reset() {
	*x = UploadFile{}
	mi := &file_proto_publish_artifact_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFile) ProtoMessage() {}

func (x *UploadFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_publish_artifact_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFile.ProtoReflect.Descriptor instead.
func (*UploadFile) Descriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{3}
}

func (x *UploadFile) GetFilePattern() string {
	if x != nil {
		return x.FilePattern
	}
	return ""
}

func (x *UploadFile) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

// Destination to upload to
type Destination struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DestinationUrl string                 `protobuf:"bytes,1,opt,name=destination_url,json=destinationUrl,proto3" json:"destination_url,omitempty"`
	Connector      *Connector             `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
	LocationType   LocationType           `protobuf:"varint,3,opt,name=location_type,json=locationType,proto3,enum=io.harness.product.ci.engine.proto.LocationType" json:"location_type,omitempty"`
	Region         string                 `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"` // Valid only for S3 connector
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Destination) Reset() {
	*x = Destination{}
	mi := &file_proto_publish_artifact_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_publish_artifact_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_proto_publish_artifact_proto_rawDescGZIP(), []int{4}
}

func (x *Destination) GetDestinationUrl() string {
	if x != nil {
		return x.DestinationUrl
	}
	return ""
}

func (x *Destination) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *Destination) GetLocationType() LocationType {
	if x != nil {
		return x.LocationType
	}
	return LocationType_UNKNOWN
}

func (x *Destination) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_proto_publish_artifact_proto protoreflect.FileDescriptor

const file_proto_publish_artifact_proto_rawDesc = "" +
	"\n" +
	"\x1cproto/publish_artifact.proto\x12\"io.harness.product.ci.engine.proto\"\x18\n" +
	"\x06TaskId\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"]\n" +
	"\tConnector\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12@\n" +
	"\x04auth\x18\x02 \x01(\x0e2,.io.harness.product.ci.engine.proto.AuthTypeR\x04auth\"\xa1\x01\n" +
	"\x11BuildPublishImage\x12\x1f\n" +
	"\vdocker_file\x18\x01 \x01(\tR\n" +
	"dockerFile\x12\x18\n" +
	"\acontext\x18\x02 \x01(\tR\acontext\x12Q\n" +
	"\vdestination\x18\x03 \x01(\v2/.io.harness.product.ci.engine.proto.DestinationR\vdestination\"\x82\x01\n" +
	"\n" +
	"UploadFile\x12!\n" +
	"\ffile_pattern\x18\x01 \x01(\tR\vfilePattern\x12Q\n" +
	"\vdestination\x18\x02 \x01(\v2/.io.harness.product.ci.engine.proto.DestinationR\vdestination\"\xf2\x01\n" +
	"\vDestination\x12'\n" +
	"\x0fdestination_url\x18\x01 \x01(\tR\x0edestinationUrl\x12K\n" +
	"\tconnector\x18\x02 \x01(\v2-.io.harness.product.ci.engine.proto.ConnectorR\tconnector\x12U\n" +
	"\rlocation_type\x18\x03 \x01(\x0e20.io.harness.product.ci.engine.proto.LocationTypeR\flocationType\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region*X\n" +
	"\fLocationType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x06\n" +
	"\x02S3\x10\x01\x12\a\n" +
	"\x03GCS\x10\x02\x12\t\n" +
	"\x05JFROG\x10\x03\x12\a\n" +
	"\x03GCR\x10\x04\x12\a\n" +
	"\x03ECR\x10\x05\x12\r\n" +
	"\tDOCKERHUB\x10\x06*;\n" +
	"\bAuthType\x12\x0e\n" +
	"\n" +
	"BASIC_AUTH\x10\x00\x12\x0f\n" +
	"\vSECRET_FILE\x10\x01\x12\x0e\n" +
	"\n" +
	"ACCESS_KEY\x10\x02B;P\x01Z7github.com/drone/go-task/k8s-engine-commons/proto;protob\x06proto3"

var (
	file_proto_publish_artifact_proto_rawDescOnce sync.Once
	file_proto_publish_artifact_proto_rawDescData []byte
)

func file_proto_publish_artifact_proto_rawDescGZIP() []byte {
	file_proto_publish_artifact_proto_rawDescOnce.Do(func() {
		file_proto_publish_artifact_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_publish_artifact_proto_rawDesc), len(file_proto_publish_artifact_proto_rawDesc)))
	})
	return file_proto_publish_artifact_proto_rawDescData
}

var file_proto_publish_artifact_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_publish_artifact_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_publish_artifact_proto_goTypes = []any{
	(LocationType)(0),         // 0: io.harness.product.ci.engine.proto.LocationType
	(AuthType)(0),             // 1: io.harness.product.ci.engine.proto.AuthType
	(*TaskId)(nil),            // 2: io.harness.product.ci.engine.proto.TaskId
	(*Connector)(nil),         // 3: io.harness.product.ci.engine.proto.Connector
	(*BuildPublishImage)(nil), // 4: io.harness.product.ci.engine.proto.BuildPublishImage
	(*UploadFile)(nil),        // 5: io.harness.product.ci.engine.proto.UploadFile
	(*Destination)(nil),       // 6: io.harness.product.ci.engine.proto.Destination
}
var file_proto_publish_artifact_proto_depIdxs = []int32{
	1, // 0: io.harness.product.ci.engine.proto.Connector.auth:type_name -> io.harness.product.ci.engine.proto.AuthType
	6, // 1: io.harness.product.ci.engine.proto.BuildPublishImage.destination:type_name -> io.harness.product.ci.engine.proto.Destination
	6, // 2: io.harness.product.ci.engine.proto.UploadFile.destination:type_name -> io.harness.product.ci.engine.proto.Destination
	3, // 3: io.harness.product.ci.engine.proto.Destination.connector:type_name -> io.harness.product.ci.engine.proto.Connector
	0, // 4: io.harness.product.ci.engine.proto.Destination.location_type:type_name -> io.harness.product.ci.engine.proto.LocationType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_publish_artifact_proto_init() }
func file_proto_publish_artifact_proto_init() {
	if File_proto_publish_artifact_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_publish_artifact_proto_rawDesc), len(file_proto_publish_artifact_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_publish_artifact_proto_goTypes,
		DependencyIndexes: file_proto_publish_artifact_proto_depIdxs,
		EnumInfos:         file_proto_publish_artifact_proto_enumTypes,
		MessageInfos:      file_proto_publish_artifact_proto_msgTypes,
	}.Build()
	File_proto_publish_artifact_proto = out.File
	file_proto_publish_artifact_proto_goTypes = nil
	file_proto_publish_artifact_proto_depIdxs = nil
}
